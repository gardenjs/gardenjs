//
// @Project: Garden by Rabbit Development 
// @Author: Martin Farkas
// @Email:  info@websites-graphix.com
//

@use "sass:math";

// 1) media queries
// 2) fluid fonts

// -----------------------------------------------------------------------------------------------
// breakpoints
// -----------------------------------------------------------------------------------------------
//  min-width
@mixin min($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    @media (min-width: $breakpoint-value) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}
//  max-width
@mixin max($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}
//  min-with & max-width
@mixin minmax($lower, $upper) {
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);
    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }
  } @else {
    @if (map-has-key($breakpoints, $lower) == false) {
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }
    @if (map-has-key($breakpoints, $upper) == false) {
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}
// write like this:
// --------------------------------
// @include min({breakpoint-name}) {
//   scss code...
// }



// -----------------------------------------------------------------------------------------------
// font-size
// -----------------------------------------------------------------------------------------------
@mixin fluid-font($min, $max, $min-vw: $min-vp-fontsize, $max-vw: $max-vp-fontsize, $fallback: false) {
  $min-no-unit : strip-units($min);
  $max-no-unit : strip-units($max);
  
  $min-vw-no-unit : strip-units($min-vw);
  $max-vw-no-unit : strip-units($max-vw);
  
  @if getUnit($min) == 'rem' or getUnit($min) == 'em' {
    $min-no-unit : strip-units($min) * 16;
    $max-no-unit : strip-units($max) * 16;
  }
  
   $responsive : calc(#{$min-no-unit}px + (#{$max-no-unit} - #{$min-no-unit}) * ((100vw - #{$min-vw}) / (#{$max-vw-no-unit} - #{$min-vw-no-unit})));
  
  @if $fallback { font-size: $fallback; }
  @else { font-size: $max; }

  font-size:  $responsive;

  @media screen and (max-width: #{$min-vw}) { font-size: $min; }
  @media screen and (min-width: #{$max-vw}) { font-size: $max; }
}

@function strip-units($number) {
  @return math.div($number, ($number * 0 + 1));
}

@function getUnit($value) {
  @return str-slice($value * 0 + '', 2, -1);
}

// write like this:
// --------------------------------
// p {
//   @include fluid-font(.9rem, 1.2rem)
// }